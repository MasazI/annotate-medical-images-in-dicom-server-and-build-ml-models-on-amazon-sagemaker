AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy Orthanc on AWS

Parameters:
  ParameterClusterName:
    Description: Name of the ECS cluster to deploy to (optional)
    Type: String
  ParameterLoadBalancerARN:
    Description: Name of the LoadBalancer to connect to (optional)
    Type: String
  ConainerImageUrl:
    Description: The url of a docker image that contains the application process that will handle the traffic for this service
    Default: flamingofugang/nginx-orthanc-plugins:latest
    Type: String
  ParameterVPCId:
    Description: ID of the VPC
    Type: AWS::EC2::VPC::Id
  PublicSubnet1Id:
    Description: PublicSubnetId, for Availability Zone 1 in the region in your VPC
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2Id:
    Description: PublicSubnetId, for Availability Zone 2 in the region in your VPC
    Type: AWS::EC2::Subnet::Id
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m3.xlarge
    AllowedValues: [t2.large, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.
  NumberofEC2Instances:
    Description: Number of EC2 instance to run container in ECS cluster
    Type: Number
    Default: 1
  NumberofContainers:
    Description: Number of docker containers to run tasks in ECS cluster
    Type: Number
    Default: 1
  OrthancContainerCPU:
    Description: The number of cpu units the Amazon ECS container agent will reserve for the container.
    Type: Number
    Default: 2048
    AllowedValues: [256, 512, 1024, 2048, 4096]
  OrthancContainerMemory:
    Description: The amount (in MiB) of memory to present to the container. . Memory should be at least two times of vCPU unit according to documentation.
    Type: Number
    Default: 4096
    AllowedValues: [512, 1024, 2048, 3072, 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 30720]
  EFSNameTag:
    Description: The name of the EFS volume
    Type: String
    MinLength: '1'
    Default: myEFSvolume
  EnableEFSBackup:
    Type: String
    Description: whether enable EFS backup or not. EFS backup has extra associated cost.
    Default: ENABLED
    AllowedValues: [ENABLED, DISABLED]
  EFSStorageInfrequentAcessAfter:
    Type: String
    Description: A value that describes the period of time that a file is not accessed, after which it transitions to the IA storage class.
    Default: AFTER_90_DAYS
    AllowedValues: [AFTER_14_DAYS, AFTER_30_DAYS, AFTER_60_DAYS, AFTER_7_DAYS, AFTER_90_DAYS]
   

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-0c1f575380708aa63
    us-east-2:
      AMIID: ami-015a2afe7e1a8af56
    us-west-1:
      AMIID: ami-032a827d612b78a50
    us-west-2:
      AMIID: ami-05edb14e89a5b98f3
    ap-northeast-1:
      AMIID: ami-06ee72c3360fd7fad
    ap-northeast-2:
      AMIID: ami-0cfc5eb79eceeeec9
    ap-south-1:
      AMIID: ami-078902ae8103daac8
    ap-southeast-1:
      AMIID: ami-09dd721a797640468
    ap-southeast-2:
      AMIID: ami-040bd2e2325535b3d
    ca-central-1:
      AMIID: ami-0a06b44c462364156
    eu-central-1:
      AMIID: ami-09509e8f8dea8ab83
    eu-north-1:
      AMIID: ami-015b157d082fd4e0d
    eu-west-1:
      AMIID: ami-0489c3efb4fe85f5d
    eu-west-2:
      AMIID: ami-037dd70536680c11f
    eu-west-3:
      AMIID: ami-0182381900083ba64
    sa-east-1:
      AMIID: ami-05313c3a9e9148109

Conditions:
  CreateCluster: !Equals
    - ''
    - !Ref 'ParameterClusterName'
  CreateLoadBalancer: !Equals
    - ''
    - !Ref 'ParameterLoadBalancerARN'

Resources:
  CloudMap:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Description: Service Map for Docker Compose project orthanconaws
      Name: orthanconaws.local
      Vpc: !Ref 'ParameterVPCId'
  OrthancServiceDiscoveryEntry:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: '"orthanc" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: orthanc
      NamespaceId: !Ref 'CloudMap'

  Cluster:
    Type: AWS::ECS::Cluster
    Condition: CreateCluster
    Properties:
      ClusterName: orthanconaws
      Tags:
        - Key: project
          Value: orthanconaws
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/orthanconaws
    Type: AWS::Logs::LogGroup

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: True
      BackupPolicy: 
        Status: !Ref EnableEFSBackup
      LifecyclePolicies:
        - TransitionToIA: !Ref EFSStorageInfrequentAcessAfter
      FileSystemTags:
        - Key: Name
          Value: !Ref 'EFSNameTag'
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref 'PublicSubnet1Id'
      SecurityGroups:
        - !Ref 'OrthancEFSNetwork'
  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref 'PublicSubnet2Id'
      SecurityGroups:
        - !Ref 'OrthancEFSNetwork'
  NFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties: 
      FileSystemId: !Ref FileSystem
      PosixUser:
        Gid: "0"
        Uid: "0"
      RootDirectory:
        Path: "/"

  OrthancServerNetwork:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: OrthancOnAWS default Security Group
      GroupName: OrthancServerNetwork
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: nginx:443/tcp
          FromPort: 443
          IpProtocol: TCP
          ToPort: 443
        - CidrIp: '0.0.0.0/0'
          Description: ssh:22/tcp
          FromPort: 22
          IpProtocol: TCP
          ToPort: 22
      Tags:
        - Key: project
          Value: orthanconaws
      VpcId: !Ref 'ParameterVPCId'
  OrthancServerNetworkIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow communication within network default
      GroupId: !Ref 'OrthancServerNetwork'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'OrthancServerNetwork'
  OrthancEFSNetwork:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Orthanc EFS Security Group
      GroupName: OrthancEFSNetwork
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref 'OrthancServerNetwork'
          Description: efs:2049/tcp
          FromPort: 2049
          IpProtocol: TCP
          ToPort: 2049
      Tags:
        - Key: project
          Value: orthanc-on-aws
      VpcId: !Ref 'ParameterVPCId'

  orthanconawsLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: CreateLoadBalancer
    Properties:
      Name: orthanconawsLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref 'PublicSubnet1Id'
        - !Ref 'PublicSubnet2Id'
      Tags:
        - Key: project
          Value: orthanconaws
      Type: network

  OrthancService:
    Type: AWS::ECS::Service
    DependsOn:
      - OrthancTCP443Listener
    Properties:
      Cluster: !If
        - CreateCluster
        - !Ref 'Cluster'
        - !Ref 'ParameterClusterName'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: !Ref NumberofContainers
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: orthanc
          ContainerPort: 443
          TargetGroupArn: !Ref 'OrthancTCP443TargetGroup'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref 'OrthancServerNetwork'
          Subnets:
            - !Ref 'PublicSubnet1Id'
            - !Ref 'PublicSubnet2Id'
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt 'OrthancServiceDiscoveryEntry.Arn'
      Tags:
        - Key: project
          Value: orthanconaws
      TaskDefinition: !Ref 'OrthancTaskDefinition'
  OrthancTCP443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref 'OrthancTCP443TargetGroup'
          Type: forward
      LoadBalancerArn: !If
        - CreateLoadBalancer
        - !Ref 'orthanconawsLoadBalancer'
        - !Ref 'ParameterLoadBalancerARN'
      Port: 443
      Protocol: TCP
  OrthancTCP443TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: TCP
      Tags:
        - Key: project
          Value: orthanconaws
      TargetType: ip
      VpcId: !Ref 'ParameterVPCId'
  OrthancTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: LOCALDOMAIN
              Value: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - .compute.internal
                  - ' orthanconaws.local'
          Essential: true
          Image: !Ref 'ConainerImageUrl'
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: orthanconaws
          Name: orthanc
          MountPoints:
            - ContainerPath: /var/lib/orthanc/db
              SourceVolume: my-efs
          PortMappings:
            - ContainerPort: 8042
              HostPort: 8042
              Protocol: tcp
            - ContainerPort: 443
              HostPort: 443
              Protocol: tcp
      Volumes:
        - name: my-efs
          EFSVolumeConfiguration: 
            FilesystemId: !GetAtt 'FileSystem.FileSystemId'
            TransitEncryption: ENABLED
            AuthorizationConfig: 
              AccessPointId: !Ref NFSAccessPoint
              IAM: ENABLED
      Cpu: !Ref OrthancContainerCPU
      Memory: !Ref OrthancContainerMemory
      ExecutionRoleArn: !Ref 'OrthancTaskExecutionRole'
      TaskRoleArn: !Ref 'OrthancTaskRole'
      Family: orthanconaws-orthanc
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
  OrthancTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  OrthancTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref 'PublicSubnet1Id'
        - !Ref 'PublicSubnet2Id'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: !Ref NumberofEC2Instances
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups:
            - !Ref 'OrthancServerNetwork'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']


Outputs:
  OrthancNginxEndpoint:
    Description: The URL for Nginx reverse proxy of Orthanc web server endpoint
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt orthanconawsLoadBalancer.DNSName

      
